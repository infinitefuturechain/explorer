const en = {
  global: {
    noneData: 'No data',
    loadMore: 'Load More',
    notFound: 'NOT FOUND',
    pageNotFound: 'Sorry, This page is not found',
    backPage: 'Return to',
    homePage: 'HomePage',
    browser: 'BROWSER',
  },
  home: {
    blockHeight: 'Block Height',
    txTotal: 'Total Transaction',
    activeValidators: 'Active Validators',
    block: 'Block',
    viewAll: 'View All',
    tx: 'Transaction',
    charity: 'Charity Blockchain',
  },
  block: {
    height: 'Block Height',
    txn: 'Txn',
    validators: 'Validators',
    votingPower: 'Voting Power',
    timestamp: 'Timestamp',
    blockInformation: 'Block Information',
    hash: 'Hash',
    transactionsNumber: 'Transactions Number',
    proposerAddress: 'Proposer',
    lastBlock: 'Last Block',
    lastBlockHash: 'Last Block Hash',
    age: 'Block Age',
    superNode: 'Validator',
  },
  validator: {
    validators: 'Validators',
    bonded: 'Bonded',
    unBonded: 'UnBonded',
    unBonding: 'UnBonding',
    active: 'Active',
    operatorAddress: 'Operator Address',
    name: 'Name',
    votingPower: 'Voting Power',
    ranking: 'Ranking',
    unBondingHeight: 'UnBonding Height',
    validator: 'VALIDATOR',
    validatorProfile: 'VALIDATOR PROFILE',
    details: 'Details',
    unBondingTime: 'UnBonding Time',
    currentStatus: 'CURRENT STATUS',
    website: 'Website',
    identity: 'Identity',
    comissionRate: 'Comission Rate',
    jailed: 'Jailed',
    totalBlocks: 'Total Blocks',
  },
  proposals: {
    proposer: 'Proposer',
    proposals: 'PROPOSALS',
    title: 'Title',
    type: 'Type',
    status: 'Status',
    submitTime: 'Submit Time',
    detail: 'Proposal Detail',
    depositEndTime: 'Deposit End Time',
    totalDeposit: 'Total Deposit',
    content: 'Proposal Content',
    description: 'Description',
    votingStatus: 'Voting Status',
    votingStartTime: 'Voting Start Time',
    votingEndTime: 'Voting End Time',
    votingResult: 'Voting Result',
    voter: 'Governance',
    owner: 'Agency Manager',
    supervisor: 'On-chain Supervision',
    validator: 'Bookkeeping Node',
    name: 'Name',
    category: 'Category',
    level: 'Level',
    votes: 'Votes',
    roles: 'Roles',
    logo_url: 'Logo',
    node_ip: 'Node IP',
    node_id: 'Node ID',
    ext_address: 'Extra Address',
    parent_id: 'Belongs to',
    applyInstructions: 'Instructions for On-chain Application',
  },
  menu: {
    tx: 'TRANSACTIONS',
    blocks: 'BLOCKS',
    transfers: 'TRANSFERS',
    record: 'RECORD',
    contract: 'CONTRACT',
    proposals: 'PROPOSALS',
    validators: 'VALIDATORS',
    charityRecord: 'RECORDS',
    joinUs: 'JOIN US',
    alliance: 'ALLIANCE',
  },
  tx: {
    time: 'Time',
    tx: 'Txhash',
    block: 'Block',
    action: 'Action',
    gas: 'Gas Used',
    memo: 'Memo',
    sender: 'Sender',
    detail: 'Transaction Information',
    total: 'Total volume of transactions within the last 100 blocks',
    endTime: 'End Time',
    totalTxs: 'Total Txs',
    prohibit: 'Prohibit Address',
    enable: 'Enable Address',
    Target: 'Target Address',
    allow: 'Allow',
    exchangeFrom: 'Exchange From',
    erc20TxHash: 'erc20 Tx Hash',
    ethTxHash: 'eth Tx Hash',
    erc20Address: 'erc20 Address',
    to: 'To',
    channel: 'Channel'
  },
  txCate: {
    all: "ALL",
    bank: 'TRANSFERS',
    migrate: 'MIGRATE',
    governance: 'GOVERNANCE',
    staking: 'STAKINGS',
    distribution: "DISTRIBUTION",
    grid999: "GRID999"
  },
  send: {
    from: 'From',
    to: 'To',
    amount: 'Amount',
  },
  record: {
    publicRecord: 'Public Record',
    authorRecord: 'Auth Record',
    fileRecord: 'File Record',
    name: 'Name',
    author: 'Author',
    orgName: 'Org Name',
    orgDescription: 'Org Description',
    orgLogoUrl: 'Org Logo',
    recordCode: 'Record Code',
    recordType: 'Record Type',
    description: 'Description',
    businessDataHash: 'Business Data Hash',
    businessData: 'Business Data',
    encryptData: 'Encrypt Data',
    encryptDataPubKey: 'Encrypt Data Pub Key',
    encryptDataPrivateKey: 'EncryptData Private Key',
    chainTime: 'Chain Time',
    recordId: 'Record ID',
    orgId: 'Org ID',
    owner: 'Owner',
    voter: 'Voter',
    supervisor: 'Supervisor',
    validator: 'Validator',
    votes: 'Votes',
    preAuthAddress: 'Pre Auth Address',
    preAuthAddressKey: 'Encrypt Data Pre Auth Address Encrypt Key',
    encryptDataKey: 'Encrypt Data Owner Encrypt Key',
    senderKey: 'Encrypt Data Owner Pub Key',
    recordInformation: 'Record Information',
    fileMd5: 'File md5',
  },
  activateAccount: {
    address: 'Address',
    moduleRoles: 'Module Roles',
    extRoles: 'Ext Roles',
  },
  genesis: {
    address: 'Address',
  },
  editOrg: {
    id: 'Org ID',
    nodeId: 'Node ID',
    nodeIp: 'Node IP',
  },
  contract: {
    contractTx: 'CONTRACT Tx',
    id: 'ID',
    time: 'Time',
    contractAddress: 'Contract Address',
    method: 'Method',
    params: 'Parameter',
    recipient: 'Recipient',
    fromAddress: 'From Address',
    name: 'Name',
    addressDetail: 'Contract Address Information',
  },
  apply: {
    applyInstructions: 'Instructions for On-chain Application',
    applyInstructionsTest: 'Please enter the description of data and business need to be on the chain, or the description of need to apply for data full node.',
    orgName: 'Agency Name',
    orgNameTest: 'Please enter the agency name',
    level: 'Org Level',
    levelUnion: 'Alliance',
    levelSpecial: 'Special',
    levelGenesis: 'Genesis',
    levelSupervise: 'Supervise',
    logo: 'Agency LOGO Address',
    logoTest: 'Please enter the URL of the agency LOGO',
    orgDes: 'Agency Information',
    orgDesTest: 'Please enter the detailed description of the agency',
    orgType: 'Agency Category',
    dataSync: 'Data Sync Agency',
    dataSyncTest: 'The sata sync agency is mainly used to synchronize network data, and cannot conduct business on the chain.',
    businessService: 'Business Service Agency',
    businessServiceTest: 'Business service agency can synchronize network data, and can also conduct business on the chain according to the requested authority.',
    basicPermission: 'Basic Permission',
    businessOnchain: 'Business On-chain',
    dataOnChain: 'Data On-chain',
    extendedPermissions: 'Extended Permissions',
    assetIssuancePermission: 'Asset Issuance Permission',
    supervisionPermission: 'Supervision Permission',
    accountingPermission: 'Accounting Permission',
    governanceProposalVotingPermission: 'Governance Proposal Voting Permission',
    agencyManagerAccount: 'Agency Manager Account',
    agencyManagerAccountTest: 'Please enter the agency manager account',
    agencyManagerAccountTest2: 'Agency manager account is used to manage members in the agency (activation, deactivation, assigning permissions, etc.) and other business management. If there is no account address, click here to',
    create: 'create',
    supervisionAccount: 'On-chain Supervision Account',
    supervisionAccountTest: 'Supervision account is used for on-chain supervision (revocation of agency, banned nodes, disabled accounts, business management and control). If there is no account address, click here to create.',
    nodeAccount: 'Bookkeeping Node Account',
    nodeAccountTest: "The bookkeeping node account is used to create the bookkeeper after the agency's data node is started. If there is no account address, click here to",
    governanceAccount: 'Governance account on the chain',
    governanceAccountTest: 'Governance account on the chain is a member of the on Chain Governance Committee, which is used for voting of on chain proposals. If there is no account address, click here',
    voting: 'Voting Weight Value',
    selfBuiltNode: 'Self-built Node',
    nodeIp: 'Agency Node IP',
    nodeIpTest: 'For self built nodes, you must fill in the IP address of the node server. Multiple IP addresses are separated by ","',
    nodeId: 'Agency Node ID',
    nodeIdTest: 'For self-built nodes, you must enter, that is, the ID of the node server, which can be obtained by querying using the hashgardrad tendermint show-node-id command',
    activateAccount: 'Activate Account',
    activateAccountTest: 'When applying for an agency, a group of accounts within the agency are activated at the same time. Multiple accounts are separated by ‘,’, and can be activated and deactivated in the management background system later.',
    yes: 'Yes',
    no: 'No',
    submit: 'Submit',
    parentId: 'Belongs to',
    parentIdInfo: '',
    forbidSubmit: '',
    supervisorOrg: 'Supervision Org',
    accountingOrg: 'Accounting Org',
  },
  alliance: {
    title: 'Alliances',
    name: 'Name',
    orgId: 'Org ID',
    parentId: 'Belongs to',
    info: 'Alliance Info',
    level: 'Org Level',
    category: 'Category',
    manager: 'Agency Manager Account',
    voter: 'Governance account',
    supervisor: 'Supervision Account',
    validator: 'Bookkeeping Node',
    activateAccount: 'Activate Account',
    nodeId: 'Node ID',
    extendedPermissions: 'Extended Permissions',
    voting: 'Voting Weight Value',
    description: 'Description',
  },
  time: {
    second: ' second ago',
    minute: ' minutes ago',
    hour: ' hours ago',
    day: ' days ago'
  }
};

export default en;
